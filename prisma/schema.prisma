generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  firstName        String?
  lastName         String?
  username         String             @unique
  password         String
  accounts         Account[]
  addressBooks     AddressBook[]
  calendarEditions CalendarEdition[]
  Contacts         Contact[]
  Advertisement    Advertisement[]
  PurchaseOverview PurchaseOverview[]
  Payment          Payment[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Contact {
  id                        String                     @id @default(uuid())
  userId                    String
  customerSince             String?
  notes                     String?
  webAddress                String?
  user                      User?                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressBooks              AddressBook[]              @relation("ContactAddressBooks")
  category                  String?
  contactContactInformation ContactContactInformation?
  contactTelecomInformation ContactTelecomInformation?
  contactAddress            ContactAddress?
  purchases                 PurchaseOverview[]
  ContactAddressBook        ContactAddressBook[]
  Payment                   Payment[]
}

model ContactContactInformation {
  id                  String  @id @default(uuid())
  firstName           String?
  lastName            String?
  altContactFirstName String?
  altContactLastName  String?
  salutation          String?
  company             String?
  Contact             Contact @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId           String  @unique
}

model ContactTelecomInformation {
  id        String   @id @default(uuid())
  extension String?
  phone     String?
  altPhone  String?
  fax       String?
  email     String?
  cellPhone String?
  homePhone String?
  Contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId String?  @unique
}

model ContactAddress {
  id        String   @id @default(uuid())
  address   String?
  address2  String?
  city      String?
  state     String?
  zip       String?
  country   String?
  Contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId String?  @unique
}

model CalendarEdition {
  id               String             @id @default(uuid())
  userId           String
  name             String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PurchaseOverview PurchaseOverview[]
}

model Advertisement {
  id        String                  @id @default(uuid())
  name      String
  isDayType Boolean                 @default(false)
  isDeleted Boolean                 @default(false)
  perMonth  Int                     @default(0)
  purchases AdvertisementPurchase[]
  userId    String
  User      User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AddressBook {
  id                 String               @id @default(uuid())
  name               String
  displayLevel       String?
  userId             String
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Contacts           Contact[]            @relation("ContactAddressBooks")
  ContactAddressBook ContactAddressBook[]
}

model ContactAddressBook {
  contactId     String
  addressBookId String
  contact       Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  addressBook   AddressBook @relation(fields: [addressBookId], references: [id], onDelete: Cascade)

  @@id([contactId, addressBookId])
}

model PurchaseOverview {
  id              String                  @id @default(uuid())
  contactId       String
  Contact         Contact                 @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adPurchases     AdvertisementPurchase[]
  userId          String
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  editionId       String
  calendarEdition CalendarEdition         @relation(fields: [editionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  year            Int
  amountOwed      Decimal
  purchaseSlots   PurchaseSlot[]
  Payment         Payment?                @relation(fields: [paymentId], references: [id])
  paymentId       String?
}

model Payment {
  id                 String             @id @default(uuid())
  purchases          PurchaseOverview[]
  totalOwed          Decimal
  totalPaid          Decimal
  frequency          String
  totalPayments      Int
  startDate          DateTime
  anticipatedEndDate DateTime
  status             String
  paymentsMade       Int                @default(0)
  contactId          String
  contact            Contact            @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stripeInvoices     StripeInvoice[]
}

model StripeInvoice {
  id              String   @id @default(uuid())
  stripeInvoiceId String
  paymentId       String?
  paid            Boolean
  cost            Decimal
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  payment         Payment? @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerEmail   String
  dueDate         DateTime
}

model AdvertisementPurchase {
  id               String            @id @default(uuid())
  advertisementId  String
  charge           Decimal
  quantity         Int
  advertisement    Advertisement     @relation(fields: [advertisementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseId       String?
  purchaseOverview PurchaseOverview? @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseSlots    PurchaseSlot[]
}

model PurchaseSlot {
  id                      String                @id @default(uuid())
  advertisementPurchaseId String
  month                   Int
  slot                    Int
  date                    DateTime?
  advertisementPurchase   AdvertisementPurchase @relation(fields: [advertisementPurchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseId              String?
  purchaseOverview        PurchaseOverview?     @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([advertisementPurchaseId, month, slot])
}
