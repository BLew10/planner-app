generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                  @id @default(uuid())
  email                 String                  @unique
  firstName             String?
  lastName              String?
  username              String                  @unique
  password              String
  accounts              Account[]
  addressBooks          AddressBook[]
  calendarEditions      CalendarEdition[]
  Contacts              Contact[]
  AdvertisementPurchase AdvertisementPurchase[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Contact {
  id                        String                     @id @default(uuid())
  userId                    String
  customerSince             String?
  notes                     String?
  webAddress                String?
  user                      User?                      @relation(fields: [userId], references: [id])
  advertisements            Advertisement[]
  addressBooks              AddressBook[]              @relation("ContactAddressBooks")
  category                  String?
  contactContactInformation ContactContactInformation?
  contactTelecomInformation ContactTelecomInformation?
  contactAddress            ContactAddress?
  advertisementPurchases    AdvertisementPurchase[]
}

model ContactContactInformation {
  id                  String  @id @default(uuid())
  firstName           String?
  lastName            String?
  altContactFirstName String?
  altContactLastName  String?
  salutation          String?
  company             String?
  Contact             Contact @relation(fields: [contactId], references: [id])
  contactId           String  @unique
}

model ContactTelecomInformation {
  id        String   @id @default(uuid())
  extension String?
  phone     String?
  altPhone  String?
  fax       String?
  email     String?
  cellPhone String?
  homePhone String?
  Contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?  @unique
}

model ContactAddress {
  id        String   @id @default(uuid())
  address   String?
  address2  String?
  city      String?
  state     String?
  zip       String?
  country   String?
  Contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?  @unique
}

model CalendarEdition {
  id     Int     @id @default(autoincrement())
  userId String
  user   User    @relation(fields: [userId], references: [id])
  months Month[]
}

model Month {
  monthId         Int                     @id
  year            Int
  editionId       Int
  purchases       AdvertisementPurchase[]
  calendarEdition CalendarEdition         @relation(fields: [editionId], references: [id])

  @@unique([monthId, year])
}

model Advertisement {
  id        String                  @id @default(uuid())
  name      String
  isDayType Boolean                 @default(false)
  purchases AdvertisementPurchase[]
  Contact   Contact?                @relation(fields: [contactId], references: [id])
  contactId String?
}

model AddressBook {
  id           String    @id @default(uuid())
  name         String
  displayLevel String?
  userId       String
  User         User      @relation(fields: [userId], references: [id])
  Contacts     Contact[] @relation("ContactAddressBooks")
}

model AdvertisementPurchase {
  id              String        @id @default(uuid())
  advertisementId String
  userId          String
  monthId         Int
  year            Int
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  month           Month         @relation(fields: [monthId, year], references: [monthId, year])
  contact         Contact?      @relation(fields: [contactId], references: [id])
  contactId       String?

  @@unique([advertisementId, userId, monthId, year]) // Ensure unique purchases per user per advertisement per month
}