generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  firstName        String?
  lastName         String?
  username         String             @unique
  password         String
  accounts         Account[]
  addressBooks     AddressBook[]
  calendarEditions CalendarEdition[]
  contacts         Contact[]
  advertisements   Advertisement[]
  purchases        PurchaseOverview[]
  payments         PaymentOverview[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Contact {
  id                        String                      @id @default(uuid())
  userId                    String
  customerSince             String?
  notes                     String?
  webAddress                String?
  user                      User?                       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressBooks              AddressBook[]               @relation("ContactAddressBooks")
  category                  String?
  contactContactInformation ContactContactInformation?
  contactTelecomInformation ContactTelecomInformation?
  contactAddress            ContactAddress?
  purchases                 PurchaseOverview[]
  contactAddressBook        ContactAddressBook[]
  payments                  PaymentOverview[]
  isDeleted                 Boolean                     @default(false)
  AdvertisementPurchaseSlot AdvertisementPurchaseSlot[]
}

model ContactContactInformation {
  id                  String  @id @default(uuid())
  firstName           String?
  lastName            String?
  altContactFirstName String?
  altContactLastName  String?
  salutation          String?
  company             String?
  contact             Contact @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId           String  @unique
}

model ContactTelecomInformation {
  id        String   @id @default(uuid())
  extension String?
  phone     String?
  altPhone  String?
  fax       String?
  email     String?  @unique
  cellPhone String?
  homePhone String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId String?  @unique
}

model ContactAddress {
  id        String   @id @default(uuid())
  address   String?
  address2  String?
  city      String?
  state     String?
  zip       String?
  country   String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId String?  @unique
}

model CalendarEdition {
  id                        String                      @id @default(uuid())
  userId                    String
  name                      String
  code                      String?                     @unique
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchases                 PurchaseOverview[]
  isDeleted                 Boolean                     @default(false)
  AdvertisementPurchaseSlot AdvertisementPurchaseSlot[]
  AdvertisementPurchase     AdvertisementPurchase[]
}

model Advertisement {
  id                        String                      @id @default(uuid())
  name                      String
  isDayType                 Boolean                     @default(false)
  isDeleted                 Boolean                     @default(false)
  perMonth                  Int                         @default(0)
  purchases                 AdvertisementPurchase[]
  userId                    String
  User                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  AdvertisementPurchaseSlot AdvertisementPurchaseSlot[]
}

model AddressBook {
  id                 String               @id @default(uuid())
  name               String
  displayLevel       String?
  userId             String
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contacts           Contact[]            @relation("ContactAddressBooks")
  contactAddressBook ContactAddressBook[]
  isDeleted          Boolean              @default(false)
}

model ContactAddressBook {
  contactId     String
  addressBookId String
  contact       Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  addressBook   AddressBook @relation(fields: [addressBookId], references: [id], onDelete: Cascade)

  @@id([contactId, addressBookId])
}

model PurchaseOverview {
  id               String                      @id @default(uuid())
  contactId        String
  contact          Contact                     @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adPurchases      AdvertisementPurchase[]
  userId           String
  user             User                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  calendarEditions CalendarEdition[]
  year             Int
  amountOwed       Decimal
  adPurchaseSlots  AdvertisementPurchaseSlot[]
  payment          PaymentOverview?            @relation(fields: [paymentId], references: [id])
  paymentId        String?
  isDeleted        Boolean                     @default(false)

  @@unique([year, contactId])
}

model PaymentOverview {
  id                          String             @id @default(uuid())
  purchaseId                  String
  purchase                    PurchaseOverview   @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User                        User?              @relation(fields: [userId], references: [id])
  userId                      String?
  Contact                     Contact?           @relation(fields: [contactId], references: [id])
  contactId                   String?
  totalSale                   Decimal
  additionalDiscount1         Decimal? // You may add 'description' field as well if needed
  additionalDiscount2         Decimal?
  additionalSales1            Decimal?
  additionalSales2            Decimal?
  trade                       Decimal?
  earlyPaymentDiscount        Decimal?
  earlyPaymentDiscountPercent Decimal?
  amountPrepaid               Decimal?
  paymentMethod               String?
  checkNumber                 String?
  paymentDueOn                Int?
  paymentOnLastDay            Boolean            @default(false)
  lateFee                     Decimal?
  lateFeePercent              Decimal?
  deliveryMethod              String?
  cardType                    String?
  cardNumber                  String?
  cardExpirationDate          DateTime?
  invoiceMessage              String?
  statementMessage            String?
  scheduledPayments           ScheduledPayment[]
}

model ScheduledPayment {
  id          String          @id @default(uuid())
  paymentId   String
  payment     PaymentOverview @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dueDate     String
  month       Int
  year        Int
  amount      Decimal
  isPaid      Boolean         @default(false)
  paymentDate String?
}

// model PaymentInvoice {
//   id          String  @id @default(uuid())
//   paymentId   String
//   status      String
//   amountOwed  Decimal
//   datePaid    String?
//   dateSent    String?
//   dateDue     String?
//   invoiceLink String?
//   isPaid      Boolean @default(false)
//   payment     Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
// }

model AdvertisementPurchase {
  id               String                      @id @default(uuid())
  advertisementId  String
  charge           Decimal
  quantity         Int
  advertisement    Advertisement               @relation(fields: [advertisementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseId       String?
  purchaseOverview PurchaseOverview?           @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adPurchaseSlots  AdvertisementPurchaseSlot[]
  isDeleted        Boolean                     @default(false)
  calendarId       String
  calendar         CalendarEdition             @relation(fields: [calendarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AdvertisementPurchaseSlot {
  id                      String                @id @default(uuid())
  advertisementPurchaseId String
  month                   Int
  slot                    Int
  date                    String?
  advertisementPurchase   AdvertisementPurchase @relation(fields: [advertisementPurchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseId              String?
  purchaseOverview        PurchaseOverview?     @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isDeleted               Boolean               @default(false)
  calendarId              String
  calendar                CalendarEdition       @relation(fields: [calendarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertisementId         String
  advertisement           Advertisement         @relation(fields: [advertisementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  year                    Int
  contactId               String
  contact                 Contact               @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
