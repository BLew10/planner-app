generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  firstName        String?
  lastName         String?
  username         String             @unique
  password         String
  accounts         Account[]
  addressBooks     AddressBook[]
  calendarEditions CalendarEdition[]
  Contacts         Contact[]
  Advertisement    Advertisement[]
  PurchaseOverview PurchaseOverview[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Contact {
  id                        String                     @id @default(uuid())
  userId                    String
  customerSince             String?
  notes                     String?
  webAddress                String?
  user                      User?                      @relation(fields: [userId], references: [id])
  addressBooks              AddressBook[]              @relation("ContactAddressBooks")
  category                  String?
  contactContactInformation ContactContactInformation?
  contactTelecomInformation ContactTelecomInformation?
  contactAddress            ContactAddress?
  purchases                 PurchaseOverview[]
}

model ContactContactInformation {
  id                  String  @id @default(uuid())
  firstName           String?
  lastName            String?
  altContactFirstName String?
  altContactLastName  String?
  salutation          String?
  company             String?
  Contact             Contact @relation(fields: [contactId], references: [id])
  contactId           String  @unique
}

model ContactTelecomInformation {
  id        String   @id @default(uuid())
  extension String?
  phone     String?
  altPhone  String?
  fax       String?
  email     String?
  cellPhone String?
  homePhone String?
  Contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?  @unique
}

model ContactAddress {
  id        String   @id @default(uuid())
  address   String?
  address2  String?
  city      String?
  state     String?
  zip       String?
  country   String?
  Contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?  @unique
}

model CalendarEdition {
  id     String @id @default(uuid())
  userId String
  name   String
  user   User   @relation(fields: [userId], references: [id])
}

model Advertisement {
  id        String                  @id @default(uuid())
  name      String
  isDayType Boolean                 @default(false)
  isDeleted Boolean                 @default(false)
  perMonth  Int                     @default(0)
  purchases AdvertisementPurchase[]
  userId    String
  User      User                    @relation(fields: [userId], references: [id])
}

model AddressBook {
  id           String    @id @default(uuid())
  name         String
  displayLevel String?
  userId       String
  User         User      @relation(fields: [userId], references: [id])
  Contacts     Contact[] @relation("ContactAddressBooks")
}

model PurchaseOverview {
  id               String                  @id @default(uuid())
  contactId        String
  Contact          Contact                 @relation(fields: [contactId], references: [id])
  adPurchases      AdvertisementPurchase[]
  userId           String
  user             User                    @relation(fields: [userId], references: [id])
  editionId        String
  year             Int
  paymentStartDate DateTime?
  paymentEndDate   DateTime?
  amountOwed       Decimal
  paymentFrequency Int
  paymentType      String
  paymentStatus    String
  paymentsMade     Int
}

model AdvertisementPurchase {
  id               String            @id @default(uuid())
  advertisementId  String
  charge           Decimal
  quantity         Int
  advertisement    Advertisement     @relation(fields: [advertisementId], references: [id])
  purchaseId       String?
  purchaseOverview PurchaseOverview? @relation(fields: [purchaseId], references: [id])
  purchaseSlots    PurchaseSlot[]
}

model PurchaseSlot {
  id                      String                @id @default(uuid())
  advertisementPurchaseId String
  month                   Int
  slot                    Int
  date                    DateTime?
  advertisementPurchase   AdvertisementPurchase @relation(fields: [advertisementPurchaseId], references: [id])

  @@unique([advertisementPurchaseId, month, slot])
}
